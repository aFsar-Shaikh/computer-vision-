{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1fd70735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: opencv-python in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (4.9.0.80)\n",
      "Requirement already satisfied: torch in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (2.4.0)\n",
      "Requirement already satisfied: torchvision in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (0.19.0)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (3.3.4)\n",
      "Requirement already satisfied: numpy in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (1.24.4)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from matplotlib) (10.4.0)\n",
      "Requirement already satisfied: six in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from cycler>=0.10->matplotlib) (1.15.0)\n",
      "Requirement already satisfied: sympy in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (1.8)\n",
      "Requirement already satisfied: networkx in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (2.5)\n",
      "Requirement already satisfied: filelock in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (3.0.12)\n",
      "Requirement already satisfied: fsspec in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (2024.6.1)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (2.11.3)\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from torch) (4.12.2)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from jinja2->torch) (1.1.1)\n",
      "Requirement already satisfied: decorator>=4.3.0 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from networkx->torch) (5.0.6)\n",
      "Requirement already satisfied: mpmath>=0.19 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from sympy->torch) (1.2.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install opencv-python torch torchvision matplotlib numpy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "468114d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pytube in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (15.0.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade pytube\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "28b46716",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: yt-dlp in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (2024.8.6)\n",
      "Requirement already satisfied: requests<3,>=2.32.2 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (2.32.3)\n",
      "Requirement already satisfied: websockets>=12.0 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (13.0)\n",
      "Requirement already satisfied: urllib3<3,>=1.26.17 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (1.26.19)\n",
      "Requirement already satisfied: brotli in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (1.1.0)\n",
      "Requirement already satisfied: mutagen in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (1.47.0)\n",
      "Requirement already satisfied: pycryptodomex in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (3.20.0)\n",
      "Requirement already satisfied: certifi in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from yt-dlp) (2023.7.22)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from requests<3,>=2.32.2->yt-dlp) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\ameer shakih\\anaconda7\\lib\\site-packages (from requests<3,>=2.32.2->yt-dlp) (2.10)\n"
     ]
    }
   ],
   "source": [
    "!pip install yt-dlp\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40c57704",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=V9YDDpo9LWg\n",
      "[youtube] V9YDDpo9LWg: Downloading webpage\n",
      "[youtube] V9YDDpo9LWg: Downloading ios player API JSON\n",
      "[youtube] V9YDDpo9LWg: Downloading web creator player API JSON\n",
      "[youtube] V9YDDpo9LWg: Downloading m3u8 information\n",
      "[info] V9YDDpo9LWg: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy： Daniel - Communication.mp4 has already been downloaded\n",
      "[download] 100% of    7.52MiB\n",
      "Downloaded video: videos\\ABA Therapy： Daniel - Communication.mp4\n",
      "Processing Video: videos\\ABA Therapy： Daniel - Communication.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=JBoc3w5EKfI\n",
      "[youtube] JBoc3w5EKfI: Downloading webpage\n",
      "[youtube] JBoc3w5EKfI: Downloading ios player API JSON\n",
      "[youtube] JBoc3w5EKfI: Downloading web creator player API JSON\n",
      "[youtube] JBoc3w5EKfI: Downloading m3u8 information\n",
      "[info] JBoc3w5EKfI: Downloading 1 format(s): 18\n",
      "[download] videos\\Group Therapy for Autism Spectrum Disorder.mp4 has already been downloaded\n",
      "[download] 100% of    3.85MiB\n",
      "Downloaded video: videos\\Group Therapy for Autism Spectrum Disorder.mp4\n",
      "Processing Video: videos\\Group Therapy for Autism Spectrum Disorder.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=aWV7UUMddCU\n",
      "[youtube] aWV7UUMddCU: Downloading webpage\n",
      "[youtube] aWV7UUMddCU: Downloading ios player API JSON\n",
      "[youtube] aWV7UUMddCU: Downloading web creator player API JSON\n",
      "[youtube] aWV7UUMddCU: Downloading m3u8 information\n",
      "[youtube] aWV7UUMddCU: Downloading MPD manifest\n",
      "[info] aWV7UUMddCU: Downloading 1 format(s): 18\n",
      "[download] videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4 has already been downloaded\n",
      "[download] 100% of   24.19MiB\n",
      "Downloaded video: videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4\n",
      "Processing Video: videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=f6wqlpG9rd0\n",
      "[youtube] f6wqlpG9rd0: Downloading webpage\n",
      "[youtube] f6wqlpG9rd0: Downloading ios player API JSON\n",
      "[youtube] f6wqlpG9rd0: Downloading web creator player API JSON\n",
      "[youtube] f6wqlpG9rd0: Downloading m3u8 information\n",
      "[info] f6wqlpG9rd0: Downloading 1 format(s): 18\n",
      "[download] videos\\Discrete Trial Training.mp4 has already been downloaded\n",
      "[download] 100% of   23.56MiB\n",
      "Downloaded video: videos\\Discrete Trial Training.mp4\n",
      "Processing Video: videos\\Discrete Trial Training.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=GNVTuLHdeSo\n",
      "[youtube] GNVTuLHdeSo: Downloading webpage\n",
      "[youtube] GNVTuLHdeSo: Downloading ios player API JSON\n",
      "[youtube] GNVTuLHdeSo: Downloading web creator player API JSON\n",
      "[youtube] GNVTuLHdeSo: Downloading m3u8 information\n",
      "[info] GNVTuLHdeSo: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Play.mp4 has already been downloaded\n",
      "[download] 100% of   10.77MiB\n",
      "Downloaded video: videos\\ABA Therapy - Play.mp4\n",
      "Processing Video: videos\\ABA Therapy - Play.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=SWtmkjd45so\n",
      "[youtube] SWtmkjd45so: Downloading webpage\n",
      "[youtube] SWtmkjd45so: Downloading ios player API JSON\n",
      "[youtube] SWtmkjd45so: Downloading web creator player API JSON\n",
      "[youtube] SWtmkjd45so: Downloading m3u8 information\n",
      "[info] SWtmkjd45so: Downloading 1 format(s): 18\n",
      "[download] videos\\Sensory Play at Home： Proprioceptive Games.mp4 has already been downloaded\n",
      "[download] 100% of   13.43MiB\n",
      "Downloaded video: videos\\Sensory Play at Home： Proprioceptive Games.mp4\n",
      "Processing Video: videos\\Sensory Play at Home： Proprioceptive Games.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=RzI6Ar5mu2Q\n",
      "[youtube] RzI6Ar5mu2Q: Downloading webpage\n",
      "[youtube] RzI6Ar5mu2Q: Downloading ios player API JSON\n",
      "[youtube] RzI6Ar5mu2Q: Downloading web creator player API JSON\n",
      "[youtube] RzI6Ar5mu2Q: Downloading m3u8 information\n",
      "[info] RzI6Ar5mu2Q: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Learning about Animals.mp4 has already been downloaded\n",
      "[download] 100% of   13.35MiB\n",
      "Downloaded video: videos\\ABA Therapy - Learning about Animals.mp4\n",
      "Processing Video: videos\\ABA Therapy - Learning about Animals.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=aulLej6Z6W8\n",
      "[youtube] aulLej6Z6W8: Downloading webpage\n",
      "[youtube] aulLej6Z6W8: Downloading ios player API JSON\n",
      "[youtube] aulLej6Z6W8: Downloading web creator player API JSON\n",
      "[youtube] aulLej6Z6W8: Downloading m3u8 information\n",
      "[info] aulLej6Z6W8: Downloading 1 format(s): 18\n",
      "[download] videos\\Matching.mp4 has already been downloaded\n",
      "[download] 100% of    1.56MiB\n",
      "Downloaded video: videos\\Matching.mp4\n",
      "Processing Video: videos\\Matching.mp4\n",
      "Frame Width: 636, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=7pN6ydLE4EQ\n",
      "[youtube] 7pN6ydLE4EQ: Downloading webpage\n",
      "[youtube] 7pN6ydLE4EQ: Downloading ios player API JSON\n",
      "[youtube] 7pN6ydLE4EQ: Downloading web creator player API JSON\n",
      "[youtube] 7pN6ydLE4EQ: Downloading m3u8 information\n",
      "[info] 7pN6ydLE4EQ: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4 has already been downloaded\n",
      "[download] 100% of   33.97MiB\n",
      "Downloaded video: videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4\n",
      "Processing Video: videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4\n",
      "Frame Width: 480, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=fEEelCgBkWA\n",
      "[youtube] fEEelCgBkWA: Downloading webpage\n",
      "[youtube] fEEelCgBkWA: Downloading ios player API JSON\n",
      "[youtube] fEEelCgBkWA: Downloading web creator player API JSON\n",
      "[youtube] fEEelCgBkWA: Downloading m3u8 information\n",
      "[info] fEEelCgBkWA: Downloading 1 format(s): 18\n",
      "[download] videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4 has already been downloaded\n",
      "[download] 100% of    8.75MiB\n",
      "Downloaded video: videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4\n",
      "Processing Video: videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=ckZQbQwM3oU\n",
      "[youtube] ckZQbQwM3oU: Downloading webpage\n",
      "[youtube] ckZQbQwM3oU: Downloading ios player API JSON\n",
      "[youtube] ckZQbQwM3oU: Downloading web creator player API JSON\n",
      "[youtube] ckZQbQwM3oU: Downloading m3u8 information\n",
      "[info] ckZQbQwM3oU: Downloading 1 format(s): 18\n",
      "[download] videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4 has already been downloaded\n",
      "[download] 100% of   14.21MiB\n",
      "Downloaded video: videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4\n",
      "Processing Video: videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=E8Wgwg3F4X0\n",
      "[youtube] E8Wgwg3F4X0: Downloading webpage\n",
      "[youtube] E8Wgwg3F4X0: Downloading ios player API JSON\n",
      "[youtube] E8Wgwg3F4X0: Downloading web creator player API JSON\n",
      "[youtube] E8Wgwg3F4X0: Downloading m3u8 information\n",
      "[info] E8Wgwg3F4X0: Downloading 1 format(s): 18\n",
      "[download] videos\\MASS TRIAL (Gross motor imitation).mp4 has already been downloaded\n",
      "[download] 100% of    4.55MiB\n",
      "Downloaded video: videos\\MASS TRIAL (Gross motor imitation).mp4\n",
      "Processing Video: videos\\MASS TRIAL (Gross motor imitation).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=rvIPH4ccfpI\n",
      "[youtube] rvIPH4ccfpI: Downloading webpage\n",
      "[youtube] rvIPH4ccfpI: Downloading ios player API JSON\n",
      "[youtube] rvIPH4ccfpI: Downloading web creator player API JSON\n",
      "[youtube] rvIPH4ccfpI: Downloading m3u8 information\n",
      "[info] rvIPH4ccfpI: Downloading 1 format(s): 18\n",
      "[download] videos\\Augmentative and Alternative Communication AAC.mp4 has already been downloaded\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[download] 100% of    1.35MiB\n",
      "Downloaded video: videos\\Augmentative and Alternative Communication AAC.mp4\n",
      "Processing Video: videos\\Augmentative and Alternative Communication AAC.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=F6iqlW6ovZc\n",
      "[youtube] F6iqlW6ovZc: Downloading webpage\n",
      "[youtube] F6iqlW6ovZc: Downloading ios player API JSON\n",
      "[youtube] F6iqlW6ovZc: Downloading web creator player API JSON\n",
      "[youtube] F6iqlW6ovZc: Downloading m3u8 information\n",
      "[info] F6iqlW6ovZc: Downloading 1 format(s): 18\n",
      "[download] videos\\Exploring the Therapeutic Playroom.mp4 has already been downloaded\n",
      "[download] 100% of    4.60MiB\n",
      "Downloaded video: videos\\Exploring the Therapeutic Playroom.mp4\n",
      "Processing Video: videos\\Exploring the Therapeutic Playroom.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube:tab] Extracting URL: https://www.youtube.com/watch?v=9qjk-Sq415s&list=PL5B0D2D5B4BFE92C1&index=6\n",
      "[youtube:tab] Downloading just the video 9qjk-Sq415s because of --no-playlist\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=9qjk-Sq415s\n",
      "[youtube] 9qjk-Sq415s: Downloading webpage\n",
      "[youtube] 9qjk-Sq415s: Downloading ios player API JSON\n",
      "[youtube] 9qjk-Sq415s: Downloading web creator player API JSON\n",
      "[youtube] 9qjk-Sq415s: Downloading m3u8 information\n",
      "[info] 9qjk-Sq415s: Downloading 1 format(s): 18\n",
      "[download] videos\\Jan 5 SonRise Mom part 1.mp4 has already been downloaded\n",
      "[download] 100% of   21.58MiB\n",
      "Downloaded video: videos\\Jan 5 SonRise Mom part 1.mp4\n",
      "Processing Video: videos\\Jan 5 SonRise Mom part 1.mp4\n",
      "Frame Width: 480, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=DI25kGJis0w\n",
      "[youtube] DI25kGJis0w: Downloading webpage\n",
      "[youtube] DI25kGJis0w: Downloading ios player API JSON\n",
      "[youtube] DI25kGJis0w: Downloading web creator player API JSON\n",
      "[youtube] DI25kGJis0w: Downloading m3u8 information\n",
      "[info] DI25kGJis0w: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Social Engagement.mp4 has already been downloaded\n",
      "[download] 100% of    5.48MiB\n",
      "Downloaded video: videos\\ABA Therapy - Social Engagement.mp4\n",
      "Processing Video: videos\\ABA Therapy - Social Engagement.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=rrLhFZG6iQY\n",
      "[youtube] rrLhFZG6iQY: Downloading webpage\n",
      "[youtube] rrLhFZG6iQY: Downloading ios player API JSON\n",
      "[youtube] rrLhFZG6iQY: Downloading web creator player API JSON\n",
      "[youtube] rrLhFZG6iQY: Downloading m3u8 information\n",
      "[info] rrLhFZG6iQY: Downloading 1 format(s): 18\n",
      "[download] videos\\Incidental Teaching.mp4 has already been downloaded\n",
      "[download] 100% of   23.42MiB\n",
      "Downloaded video: videos\\Incidental Teaching.mp4\n",
      "Processing Video: videos\\Incidental Teaching.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=RKOZbT0ftL4&t=1s\n",
      "[youtube] RKOZbT0ftL4: Downloading webpage\n",
      "[youtube] RKOZbT0ftL4: Downloading ios player API JSON\n",
      "[youtube] RKOZbT0ftL4: Downloading web creator player API JSON\n",
      "[youtube] RKOZbT0ftL4: Downloading m3u8 information\n",
      "[info] RKOZbT0ftL4: Downloading 1 format(s): 18\n",
      "[download] videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4 has already been downloaded\n",
      "[download] 100% of   94.98MiB\n",
      "Downloaded video: videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4\n",
      "Processing Video: videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=N7TBbWHB01E\n",
      "[youtube] N7TBbWHB01E: Downloading webpage\n",
      "[youtube] N7TBbWHB01E: Downloading ios player API JSON\n",
      "[youtube] N7TBbWHB01E: Downloading web creator player API JSON\n",
      "[youtube] N7TBbWHB01E: Downloading m3u8 information\n",
      "[info] N7TBbWHB01E: Downloading 1 format(s): 18\n",
      "[download] videos\\Natural Environment Teaching (NET).mp4 has already been downloaded\n",
      "[download] 100% of   15.79MiB\n",
      "Downloaded video: videos\\Natural Environment Teaching (NET).mp4\n",
      "Processing Video: videos\\Natural Environment Teaching (NET).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=1YqVEVbXQ1c\n",
      "[youtube] 1YqVEVbXQ1c: Downloading webpage\n",
      "[youtube] 1YqVEVbXQ1c: Downloading ios player API JSON\n",
      "[youtube] 1YqVEVbXQ1c: Downloading web creator player API JSON\n",
      "[youtube] 1YqVEVbXQ1c: Downloading m3u8 information\n",
      "[info] 1YqVEVbXQ1c: Downloading 1 format(s): 18\n",
      "[download] videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4 has already been downloaded\n",
      "[download] 100% of   97.98MiB\n",
      "Downloaded video: videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4\n",
      "Processing Video: videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import os\n",
    "import yt_dlp\n",
    "\n",
    "# Function to download video from YouTube using yt-dlp\n",
    "def download_youtube_video(url, output_path='videos'):\n",
    "    try:\n",
    "        # Set up yt-dlp options\n",
    "        ydl_opts = {\n",
    "            'format': 'best[ext=mp4]',\n",
    "            'outtmpl': os.path.join(output_path, '%(title)s.%(ext)s'),\n",
    "            'noplaylist': True,  # Ensure only single video downloads\n",
    "        }\n",
    "\n",
    "        # Create output path if it doesn't exist\n",
    "        if not os.path.exists(output_path):\n",
    "            os.makedirs(output_path)\n",
    "\n",
    "        # Download video\n",
    "        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n",
    "            info = ydl.extract_info(url, download=True)\n",
    "            video_path = ydl.prepare_filename(info)\n",
    "            print(f\"Downloaded video: {video_path}\")\n",
    "            return video_path\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to download {url}: {e}\")\n",
    "        return None\n",
    "\n",
    "# List of YouTube video URLs\n",
    "video_urls = [\n",
    "    'https://www.youtube.com/watch?v=V9YDDpo9LWg',\n",
    "    'https://www.youtube.com/watch?v=JBoc3w5EKfI',\n",
    "    'https://www.youtube.com/watch?v=aWV7UUMddCU',\n",
    "    'https://www.youtube.com/watch?v=f6wqlpG9rd0',\n",
    "    'https://www.youtube.com/watch?v=GNVTuLHdeSo',\n",
    "    'https://www.youtube.com/watch?v=SWtmkjd45so',\n",
    "    'https://www.youtube.com/watch?v=RzI6Ar5mu2Q',\n",
    "    'https://www.youtube.com/watch?v=aulLej6Z6W8',\n",
    "    'https://www.youtube.com/watch?v=7pN6ydLE4EQ',\n",
    "    'https://www.youtube.com/watch?v=fEEelCgBkWA',\n",
    "    'https://www.youtube.com/watch?v=ckZQbQwM3oU',\n",
    "    'https://www.youtube.com/watch?v=E8Wgwg3F4X0',\n",
    "    'https://www.youtube.com/watch?v=rvIPH4ccfpI',\n",
    "    'https://www.youtube.com/watch?v=F6iqlW6ovZc',\n",
    "    'https://www.youtube.com/watch?v=9qjk-Sq415s&list=PL5B0D2D5B4BFE92C1&index=6',\n",
    "    'https://www.youtube.com/watch?v=DI25kGJis0w',\n",
    "    'https://www.youtube.com/watch?v=rrLhFZG6iQY',\n",
    "    'https://www.youtube.com/watch?v=RKOZbT0ftL4&t=1s',\n",
    "    'https://www.youtube.com/watch?v=N7TBbWHB01E',\n",
    "    'https://www.youtube.com/watch?v=1YqVEVbXQ1c'\n",
    "]\n",
    "\n",
    "# Iterate over each video URL, download and process\n",
    "for video_url in video_urls:\n",
    "    video_path = download_youtube_video(video_url)\n",
    "\n",
    "    # If the video was successfully downloaded, process it\n",
    "    if video_path:\n",
    "        # Load the downloaded video with OpenCV\n",
    "        cap = cv2.VideoCapture(video_path)\n",
    "\n",
    "        # Check if the video opened successfully\n",
    "        if not cap.isOpened():\n",
    "            print(f\"Error: Could not open video {video_path}.\")\n",
    "            continue\n",
    "\n",
    "        # Get video properties\n",
    "        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "        frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "        fps = cap.get(cv2.CAP_PROP_FPS)\n",
    "\n",
    "        # Display some properties\n",
    "        print(f\"Processing Video: {video_path}\")\n",
    "        print(f\"Frame Width: {frame_width}, Frame Height: {frame_height}, FPS: {fps}\")\n",
    "\n",
    "        # Process the video frame by frame\n",
    "        while True:\n",
    "            ret, frame = cap.read()\n",
    "            if not ret:\n",
    "                break\n",
    "\n",
    "            # Display the frame\n",
    "            cv2.imshow('Video', frame)\n",
    "\n",
    "            # Press 'q' to exit the video window\n",
    "            if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "                break\n",
    "\n",
    "        cap.release()\n",
    "        cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "df4d0870",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Could not open video.\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "\n",
    "# Load the video\n",
    "video_path = 'path/to/your/video.mp4'  # Replace with your video path\n",
    "cap = cv2.VideoCapture(video_path)\n",
    "\n",
    "# Check if the video opened successfully\n",
    "if not cap.isOpened():\n",
    "    print(\"Error: Could not open video.\")\n",
    "    exit()\n",
    "\n",
    "# Get video properties\n",
    "frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "fps = cap.get(cv2.CAP_PROP_FPS)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d81d8d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ultralytics import YOLO\n",
    "\n",
    "# Load the YOLO model - using YOLOv8, for example\n",
    "model = YOLO('yolov8n.pt')  # Replace with the path to the model you need (e.g., trained for specific child/adult classes)\n",
    "\n",
    "def detect_persons(frame):\n",
    "    results = model(frame)\n",
    "    detections = results[0].boxes.data.cpu().numpy()  # Extract bounding boxes\n",
    "    return detections  # Format [x1, y1, x2, y2, confidence, class]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a0f998ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "from deep_sort_realtime.deepsort_tracker import DeepSort\n",
    "\n",
    "# Initialize Deep SORT tracker\n",
    "tracker = DeepSort(max_age=30, n_init=3)\n",
    "\n",
    "def track_objects(detections, frame):\n",
    "    # Convert YOLO detections to format [x, y, width, height, confidence, class]\n",
    "    processed_detections = [\n",
    "        [x1, y1, x2 - x1, y2 - y1, confidence, int(cls)] for x1, y1, x2, y2, confidence, cls in detections\n",
    "    ]\n",
    "\n",
    "    # Track objects\n",
    "    tracks = tracker.update_tracks(processed_detections, frame=frame)\n",
    "\n",
    "    for track in tracks:\n",
    "        if not track.is_confirmed():\n",
    "            continue\n",
    "        track_id = track.track_id\n",
    "        ltrb = track.to_ltrb()  # Get the bounding box coordinates\n",
    "        x1, y1, x2, y2 = map(int, ltrb)\n",
    "        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)\n",
    "        cv2.putText(frame, f'ID: {track_id}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)\n",
    "\n",
    "    return frame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9ac9a2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello world\n"
     ]
    }
   ],
   "source": [
    "print(\"hello world\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a40dddcb",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'cap' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-1de6eddd9a25>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[0mret\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mframe\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcap\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mret\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m         \u001b[1;32mbreak\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'cap' is not defined"
     ]
    }
   ],
   "source": [
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Detect persons in the current frame\n",
    "    detections = detect_persons(frame)\n",
    "\n",
    "    # Track persons and assign unique IDs\n",
    "    tracked_frame = track_objects(detections, frame)\n",
    "\n",
    "    # Display the frame with bounding boxes and IDs\n",
    "    cv2.imshow('Person Detection and Tracking', tracked_frame)\n",
    "\n",
    "    # Save or write frames to an output video if required\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b189f186",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=V9YDDpo9LWg\n",
      "[youtube] V9YDDpo9LWg: Downloading webpage\n",
      "[youtube] V9YDDpo9LWg: Downloading ios player API JSON\n",
      "[youtube] V9YDDpo9LWg: Downloading web creator player API JSON\n",
      "[youtube] V9YDDpo9LWg: Downloading m3u8 information\n",
      "[info] V9YDDpo9LWg: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy： Daniel - Communication.mp4 has already been downloaded\n",
      "[download] 100% of    7.52MiB\n",
      "Downloaded video: videos\\ABA Therapy： Daniel - Communication.mp4\n",
      "Processing Video: videos\\ABA Therapy： Daniel - Communication.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=JBoc3w5EKfI\n",
      "[youtube] JBoc3w5EKfI: Downloading webpage\n",
      "[youtube] JBoc3w5EKfI: Downloading ios player API JSON\n",
      "[youtube] JBoc3w5EKfI: Downloading web creator player API JSON\n",
      "[youtube] JBoc3w5EKfI: Downloading m3u8 information\n",
      "[info] JBoc3w5EKfI: Downloading 1 format(s): 18\n",
      "[download] videos\\Group Therapy for Autism Spectrum Disorder.mp4 has already been downloaded\n",
      "[download] 100% of    3.85MiB\n",
      "Downloaded video: videos\\Group Therapy for Autism Spectrum Disorder.mp4\n",
      "Processing Video: videos\\Group Therapy for Autism Spectrum Disorder.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=aWV7UUMddCU\n",
      "[youtube] aWV7UUMddCU: Downloading webpage\n",
      "[youtube] aWV7UUMddCU: Downloading ios player API JSON\n",
      "[youtube] aWV7UUMddCU: Downloading web creator player API JSON\n",
      "[youtube] aWV7UUMddCU: Downloading m3u8 information\n",
      "[youtube] aWV7UUMddCU: Downloading MPD manifest\n",
      "[info] aWV7UUMddCU: Downloading 1 format(s): 18\n",
      "[download] videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4 has already been downloaded\n",
      "[download] 100% of   24.19MiB\n",
      "Downloaded video: videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4\n",
      "Processing Video: videos\\Play Therapy Session working on Feelings with Candy Land Game.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=f6wqlpG9rd0\n",
      "[youtube] f6wqlpG9rd0: Downloading webpage\n",
      "[youtube] f6wqlpG9rd0: Downloading ios player API JSON\n",
      "[youtube] f6wqlpG9rd0: Downloading web creator player API JSON\n",
      "[youtube] f6wqlpG9rd0: Downloading m3u8 information\n",
      "[info] f6wqlpG9rd0: Downloading 1 format(s): 18\n",
      "[download] videos\\Discrete Trial Training.mp4 has already been downloaded\n",
      "[download] 100% of   23.56MiB\n",
      "Downloaded video: videos\\Discrete Trial Training.mp4\n",
      "Processing Video: videos\\Discrete Trial Training.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=GNVTuLHdeSo\n",
      "[youtube] GNVTuLHdeSo: Downloading webpage\n",
      "[youtube] GNVTuLHdeSo: Downloading ios player API JSON\n",
      "[youtube] GNVTuLHdeSo: Downloading web creator player API JSON\n",
      "[youtube] GNVTuLHdeSo: Downloading m3u8 information\n",
      "[info] GNVTuLHdeSo: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Play.mp4 has already been downloaded\n",
      "[download] 100% of   10.77MiB\n",
      "Downloaded video: videos\\ABA Therapy - Play.mp4\n",
      "Processing Video: videos\\ABA Therapy - Play.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=SWtmkjd45so\n",
      "[youtube] SWtmkjd45so: Downloading webpage\n",
      "[youtube] SWtmkjd45so: Downloading ios player API JSON\n",
      "[youtube] SWtmkjd45so: Downloading web creator player API JSON\n",
      "[youtube] SWtmkjd45so: Downloading m3u8 information\n",
      "[info] SWtmkjd45so: Downloading 1 format(s): 18\n",
      "[download] videos\\Sensory Play at Home： Proprioceptive Games.mp4 has already been downloaded\n",
      "[download] 100% of   13.43MiB\n",
      "Downloaded video: videos\\Sensory Play at Home： Proprioceptive Games.mp4\n",
      "Processing Video: videos\\Sensory Play at Home： Proprioceptive Games.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=RzI6Ar5mu2Q\n",
      "[youtube] RzI6Ar5mu2Q: Downloading webpage\n",
      "[youtube] RzI6Ar5mu2Q: Downloading ios player API JSON\n",
      "[youtube] RzI6Ar5mu2Q: Downloading web creator player API JSON\n",
      "[youtube] RzI6Ar5mu2Q: Downloading m3u8 information\n",
      "[info] RzI6Ar5mu2Q: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Learning about Animals.mp4 has already been downloaded\n",
      "[download] 100% of   13.35MiB\n",
      "Downloaded video: videos\\ABA Therapy - Learning about Animals.mp4\n",
      "Processing Video: videos\\ABA Therapy - Learning about Animals.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=aulLej6Z6W8\n",
      "[youtube] aulLej6Z6W8: Downloading webpage\n",
      "[youtube] aulLej6Z6W8: Downloading ios player API JSON\n",
      "[youtube] aulLej6Z6W8: Downloading web creator player API JSON\n",
      "[youtube] aulLej6Z6W8: Downloading m3u8 information\n",
      "[info] aulLej6Z6W8: Downloading 1 format(s): 18\n",
      "[download] videos\\Matching.mp4 has already been downloaded\n",
      "[download] 100% of    1.56MiB\n",
      "Downloaded video: videos\\Matching.mp4\n",
      "Processing Video: videos\\Matching.mp4\n",
      "Frame Width: 636, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=7pN6ydLE4EQ\n",
      "[youtube] 7pN6ydLE4EQ: Downloading webpage\n",
      "[youtube] 7pN6ydLE4EQ: Downloading ios player API JSON\n",
      "[youtube] 7pN6ydLE4EQ: Downloading web creator player API JSON\n",
      "[youtube] 7pN6ydLE4EQ: Downloading m3u8 information\n",
      "[info] 7pN6ydLE4EQ: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4 has already been downloaded\n",
      "[download] 100% of   33.97MiB\n",
      "Downloaded video: videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4\n",
      "Processing Video: videos\\ABA Autism Training - Chapter 1 - The Discrete Trial.mp4\n",
      "Frame Width: 480, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=fEEelCgBkWA\n",
      "[youtube] fEEelCgBkWA: Downloading webpage\n",
      "[youtube] fEEelCgBkWA: Downloading ios player API JSON\n",
      "[youtube] fEEelCgBkWA: Downloading web creator player API JSON\n",
      "[youtube] fEEelCgBkWA: Downloading m3u8 information\n",
      "[info] fEEelCgBkWA: Downloading 1 format(s): 18\n",
      "[download] videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4 has already been downloaded\n",
      "[download] 100% of    8.75MiB\n",
      "Downloaded video: videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4\n",
      "Processing Video: videos\\Preference Assessment with Toys： Multiple Stimulus without Replacement (MSWO).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=ckZQbQwM3oU\n",
      "[youtube] ckZQbQwM3oU: Downloading webpage\n",
      "[youtube] ckZQbQwM3oU: Downloading ios player API JSON\n",
      "[youtube] ckZQbQwM3oU: Downloading web creator player API JSON\n",
      "[youtube] ckZQbQwM3oU: Downloading m3u8 information\n",
      "[info] ckZQbQwM3oU: Downloading 1 format(s): 18\n",
      "[download] videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4 has already been downloaded\n",
      "[download] 100% of   14.21MiB\n",
      "Downloaded video: videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4\n",
      "Processing Video: videos\\How to Do Play Therapy ： Building a Growth Mindset Role Play.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=E8Wgwg3F4X0\n",
      "[youtube] E8Wgwg3F4X0: Downloading webpage\n",
      "[youtube] E8Wgwg3F4X0: Downloading ios player API JSON\n",
      "[youtube] E8Wgwg3F4X0: Downloading web creator player API JSON\n",
      "[youtube] E8Wgwg3F4X0: Downloading m3u8 information\n",
      "[info] E8Wgwg3F4X0: Downloading 1 format(s): 18\n",
      "[download] videos\\MASS TRIAL (Gross motor imitation).mp4 has already been downloaded\n",
      "[download] 100% of    4.55MiB\n",
      "Downloaded video: videos\\MASS TRIAL (Gross motor imitation).mp4\n",
      "Processing Video: videos\\MASS TRIAL (Gross motor imitation).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=rvIPH4ccfpI\n",
      "[youtube] rvIPH4ccfpI: Downloading webpage\n",
      "[youtube] rvIPH4ccfpI: Downloading ios player API JSON\n",
      "[youtube] rvIPH4ccfpI: Downloading web creator player API JSON\n",
      "[youtube] rvIPH4ccfpI: Downloading m3u8 information\n",
      "[info] rvIPH4ccfpI: Downloading 1 format(s): 18\n",
      "[download] videos\\Augmentative and Alternative Communication AAC.mp4 has already been downloaded\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[download] 100% of    1.35MiB\n",
      "Downloaded video: videos\\Augmentative and Alternative Communication AAC.mp4\n",
      "Processing Video: videos\\Augmentative and Alternative Communication AAC.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=F6iqlW6ovZc\n",
      "[youtube] F6iqlW6ovZc: Downloading webpage\n",
      "[youtube] F6iqlW6ovZc: Downloading ios player API JSON\n",
      "[youtube] F6iqlW6ovZc: Downloading web creator player API JSON\n",
      "[youtube] F6iqlW6ovZc: Downloading m3u8 information\n",
      "[info] F6iqlW6ovZc: Downloading 1 format(s): 18\n",
      "[download] videos\\Exploring the Therapeutic Playroom.mp4 has already been downloaded\n",
      "[download] 100% of    4.60MiB\n",
      "Downloaded video: videos\\Exploring the Therapeutic Playroom.mp4\n",
      "Processing Video: videos\\Exploring the Therapeutic Playroom.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube:tab] Extracting URL: https://www.youtube.com/watch?v=9qjk-Sq415s&list=PL5B0D2D5B4BFE92C1&index=6\n",
      "[youtube:tab] Downloading just the video 9qjk-Sq415s because of --no-playlist\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=9qjk-Sq415s\n",
      "[youtube] 9qjk-Sq415s: Downloading webpage\n",
      "[youtube] 9qjk-Sq415s: Downloading ios player API JSON\n",
      "[youtube] 9qjk-Sq415s: Downloading web creator player API JSON\n",
      "[youtube] 9qjk-Sq415s: Downloading m3u8 information\n",
      "[info] 9qjk-Sq415s: Downloading 1 format(s): 18\n",
      "[download] videos\\Jan 5 SonRise Mom part 1.mp4 has already been downloaded\n",
      "[download] 100% of   21.58MiB\n",
      "Downloaded video: videos\\Jan 5 SonRise Mom part 1.mp4\n",
      "Processing Video: videos\\Jan 5 SonRise Mom part 1.mp4\n",
      "Frame Width: 480, Frame Height: 360, FPS: 29.97002997002997\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=DI25kGJis0w\n",
      "[youtube] DI25kGJis0w: Downloading webpage\n",
      "[youtube] DI25kGJis0w: Downloading ios player API JSON\n",
      "[youtube] DI25kGJis0w: Downloading web creator player API JSON\n",
      "[youtube] DI25kGJis0w: Downloading m3u8 information\n",
      "[info] DI25kGJis0w: Downloading 1 format(s): 18\n",
      "[download] videos\\ABA Therapy - Social Engagement.mp4 has already been downloaded\n",
      "[download] 100% of    5.48MiB\n",
      "Downloaded video: videos\\ABA Therapy - Social Engagement.mp4\n",
      "Processing Video: videos\\ABA Therapy - Social Engagement.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 25.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=rrLhFZG6iQY\n",
      "[youtube] rrLhFZG6iQY: Downloading webpage\n",
      "[youtube] rrLhFZG6iQY: Downloading ios player API JSON\n",
      "[youtube] rrLhFZG6iQY: Downloading web creator player API JSON\n",
      "[youtube] rrLhFZG6iQY: Downloading m3u8 information\n",
      "[info] rrLhFZG6iQY: Downloading 1 format(s): 18\n",
      "[download] videos\\Incidental Teaching.mp4 has already been downloaded\n",
      "[download] 100% of   23.42MiB\n",
      "Downloaded video: videos\\Incidental Teaching.mp4\n",
      "Processing Video: videos\\Incidental Teaching.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=RKOZbT0ftL4&t=1s\n",
      "[youtube] RKOZbT0ftL4: Downloading webpage\n",
      "[youtube] RKOZbT0ftL4: Downloading ios player API JSON\n",
      "[youtube] RKOZbT0ftL4: Downloading web creator player API JSON\n",
      "[youtube] RKOZbT0ftL4: Downloading m3u8 information\n",
      "[info] RKOZbT0ftL4: Downloading 1 format(s): 18\n",
      "[download] videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4 has already been downloaded\n",
      "[download] 100% of   94.98MiB\n",
      "Downloaded video: videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4\n",
      "Processing Video: videos\\Autism (Moderate - Severe) and ABA - Training Session.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=N7TBbWHB01E\n",
      "[youtube] N7TBbWHB01E: Downloading webpage\n",
      "[youtube] N7TBbWHB01E: Downloading ios player API JSON\n",
      "[youtube] N7TBbWHB01E: Downloading web creator player API JSON\n",
      "[youtube] N7TBbWHB01E: Downloading m3u8 information\n",
      "[info] N7TBbWHB01E: Downloading 1 format(s): 18\n",
      "[download] videos\\Natural Environment Teaching (NET).mp4 has already been downloaded\n",
      "[download] 100% of   15.79MiB\n",
      "Downloaded video: videos\\Natural Environment Teaching (NET).mp4\n",
      "Processing Video: videos\\Natural Environment Teaching (NET).mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n",
      "[youtube] Extracting URL: https://www.youtube.com/watch?v=1YqVEVbXQ1c\n",
      "[youtube] 1YqVEVbXQ1c: Downloading webpage\n",
      "[youtube] 1YqVEVbXQ1c: Downloading ios player API JSON\n",
      "[youtube] 1YqVEVbXQ1c: Downloading web creator player API JSON\n",
      "[youtube] 1YqVEVbXQ1c: Downloading m3u8 information\n",
      "[info] 1YqVEVbXQ1c: Downloading 1 format(s): 18\n",
      "[download] videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4 has already been downloaded\n",
      "[download] 100% of   97.98MiB\n",
      "Downloaded video: videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4\n",
      "Processing Video: videos\\Speech Therapy Training Session- Moderate to Severe Autism.mp4\n",
      "Frame Width: 640, Frame Height: 360, FPS: 30.0\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import os\n",
    "import yt_dlp\n",
    "\n",
    "# Function to download video from YouTube using yt-dlp\n",
    "def download_youtube_video(url, output_path='videos'):\n",
    "    try:\n",
    "        # Set up yt-dlp options\n",
    "        ydl_opts = {\n",
    "            'format': 'best[ext=mp4]',\n",
    "            'outtmpl': os.path.join(output_path, '%(title)s.%(ext)s'),\n",
    "            'noplaylist': True,  # Ensure only single video downloads\n",
    "        }\n",
    "\n",
    "        # Create output path if it doesn't exist\n",
    "        if not os.path.exists(output_path):\n",
    "            os.makedirs(output_path)\n",
    "\n",
    "        # Download video\n",
    "        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n",
    "            info = ydl.extract_info(url, download=True)\n",
    "            video_path = ydl.prepare_filename(info)\n",
    "            print(f\"Downloaded video: {video_path}\")\n",
    "            return video_path\n",
    "    except Exception as e:\n",
    "        print(f\"Failed to download {url}: {e}\")\n",
    "        return None\n",
    "\n",
    "# Replace with your actual detection and tracking functions\n",
    "def detect_persons(frame):\n",
    "    # Dummy function: Replace with your actual detection logic\n",
    "    return []\n",
    "\n",
    "def track_objects(detections, frame):\n",
    "    # Dummy function: Replace with your actual tracking logic\n",
    "    # This function should draw bounding boxes and unique IDs on the frame\n",
    "    return frame\n",
    "\n",
    "# List of YouTube video URLs\n",
    "video_urls = [\n",
    "    'https://www.youtube.com/watch?v=V9YDDpo9LWg',\n",
    "    'https://www.youtube.com/watch?v=JBoc3w5EKfI',\n",
    "    'https://www.youtube.com/watch?v=aWV7UUMddCU',\n",
    "    'https://www.youtube.com/watch?v=f6wqlpG9rd0',\n",
    "    'https://www.youtube.com/watch?v=GNVTuLHdeSo',\n",
    "    'https://www.youtube.com/watch?v=SWtmkjd45so',\n",
    "    'https://www.youtube.com/watch?v=RzI6Ar5mu2Q',\n",
    "    'https://www.youtube.com/watch?v=aulLej6Z6W8',\n",
    "    'https://www.youtube.com/watch?v=7pN6ydLE4EQ',\n",
    "    'https://www.youtube.com/watch?v=fEEelCgBkWA',\n",
    "    'https://www.youtube.com/watch?v=ckZQbQwM3oU',\n",
    "    'https://www.youtube.com/watch?v=E8Wgwg3F4X0',\n",
    "    'https://www.youtube.com/watch?v=rvIPH4ccfpI',\n",
    "    'https://www.youtube.com/watch?v=F6iqlW6ovZc',\n",
    "    'https://www.youtube.com/watch?v=9qjk-Sq415s&list=PL5B0D2D5B4BFE92C1&index=6',\n",
    "    'https://www.youtube.com/watch?v=DI25kGJis0w',\n",
    "    'https://www.youtube.com/watch?v=rrLhFZG6iQY',\n",
    "    'https://www.youtube.com/watch?v=RKOZbT0ftL4&t=1s',\n",
    "    'https://www.youtube.com/watch?v=N7TBbWHB01E',\n",
    "    'https://www.youtube.com/watch?v=1YqVEVbXQ1c'\n",
    "]\n",
    "\n",
    "\n",
    "# Iterate over each video URL, download, and process\n",
    "for video_url in video_urls:\n",
    "    video_path = download_youtube_video(video_url)\n",
    "\n",
    "    # If the video was successfully downloaded, process it\n",
    "    if video_path:\n",
    "        # Initialize the video capture object\n",
    "        cap = cv2.VideoCapture(video_path)\n",
    "\n",
    "        # Check if the video opened successfully\n",
    "        if not cap.isOpened():\n",
    "            print(f\"Error: Could not open video {video_path}.\")\n",
    "            continue\n",
    "\n",
    "        # Get video properties\n",
    "        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "        frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "        fps = cap.get(cv2.CAP_PROP_FPS)\n",
    "\n",
    "        # Display some properties\n",
    "        print(f\"Processing Video: {video_path}\")\n",
    "        print(f\"Frame Width: {frame_width}, Frame Height: {frame_height}, FPS: {fps}\")\n",
    "\n",
    "        # Process the video frame by frame\n",
    "        while True:\n",
    "            ret, frame = cap.read()\n",
    "            if not ret:\n",
    "                break\n",
    "\n",
    "            # Detect persons in the current frame\n",
    "            detections = detect_persons(frame)\n",
    "\n",
    "            # Track persons and assign unique IDs\n",
    "            tracked_frame = track_objects(detections, frame)\n",
    "\n",
    "            # Display the frame with bounding boxes and IDs\n",
    "            cv2.imshow('Person Detection and Tracking', tracked_frame)\n",
    "\n",
    "            # Save or write frames to an output video if required\n",
    "\n",
    "            # Press 'q' to exit the video window\n",
    "            if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "                break\n",
    "\n",
    "        cap.release()\n",
    "        cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b5069d4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54729891",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56cc4f2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0a4d8cc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
